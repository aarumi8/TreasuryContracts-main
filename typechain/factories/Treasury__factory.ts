/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Treasury, TreasuryInterface } from "../Treasury";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "factoryAddress",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "factoryContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "primaryToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "primaryTokenAmount",
        type: "uint256",
      },
    ],
    name: "withdrawERC20ByERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "primaryTokenIds",
        type: "uint256[]",
      },
    ],
    name: "withdrawERC20ByERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "primaryTokenAmount",
        type: "uint256",
      },
    ],
    name: "withdrawETHByERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "primaryTokenIds",
        type: "uint256[]",
      },
    ],
    name: "withdrawETHByERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "primaryTokenAmount",
        type: "uint256",
      },
    ],
    name: "withdrawMultipleTokensByERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "primaryTokenIds",
        type: "uint256[]",
      },
    ],
    name: "withdrawTokensByERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260405161122038038061122083398101604081905261002291610072565b60015f81905580546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100a3565b80516001600160a01b038116811461006d575f80fd5b919050565b5f8060408385031215610083575f80fd5b61008c83610057565b915061009a60208401610057565b90509250929050565b611170806100b05f395ff3fe60806040526004361061007c575f3560e01c806391ac094c1161004c57806391ac094c1461013b57806397b558b314610167578063b622aa5814610186578063df66a9d1146101a5575f80fd5b806326db956c14610087578063732e0a1d146100a8578063885464a1146100fd5780638d9f931f1461011c575f80fd5b3661008357005b5f80fd5b348015610092575f80fd5b506100a66100a1366004610e1f565b6101c4565b005b3480156100b3575f80fd5b506002546100d49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b348015610108575f80fd5b506100a6610117366004610e91565b6101ec565b348015610127575f80fd5b506100a6610136366004610ee2565b610216565b348015610146575f80fd5b506001546100d49073ffffffffffffffffffffffffffffffffffffffff1681565b348015610172575f80fd5b506100a6610181366004610f2a565b6102c5565b348015610191575f80fd5b506100a66101a0366004610f41565b6102eb565b3480156101b0575f80fd5b506100a66101bf366004610fa8565b61038f565b6101cc6103aa565b6101d68282610420565b6101df816105fa565b6101e860015f55565b5050565b6101f46103aa565b6101fe8382610420565b61020882826106b2565b61021160015f55565b505050565b61021e6103aa565b5f5b828110156102bb575f84848381811061023b5761023b610fdb565b90506020020160208101906102509190611008565b73ffffffffffffffffffffffffffffffffffffffff16036102795761027482610790565b6102a9565b6102a984848381811061028e5761028e610fdb565b90506020020160208101906102a39190611008565b83610420565b806102b381611057565b915050610220565b50610208816105fa565b6102cd6103aa565b6102d681610790565b6102df816105fa565b6102e860015f55565b50565b6102f36103aa565b5f5b83811015610375575f85858381811061031057610310610fdb565b90506020020160208101906103259190611008565b73ffffffffffffffffffffffffffffffffffffffff160361034e5761034982610790565b610363565b61036385858381811061028e5761028e610fdb565b8061036d81611057565b9150506102f5565b5061038082826106b2565b61038960015f55565b50505050565b6103976103aa565b6103a081610790565b6101df82826106b2565b60025f540361041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60025f55565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f906104b89073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa15801561048e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104b2919061108e565b836107ea565b90505f6104c482610810565b90506104d081836110a5565b915073ffffffffffffffffffffffffffffffffffffffff84166323b872dd30336040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604481018590526064016020604051808303815f875af1158015610566573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061058a91906110b8565b6105f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5769746864726177616c206661696c65640000000000000000000000000000006044820152606401610411565b61038984826108b8565b60015473ffffffffffffffffffffffffffffffffffffffff166323b872dd336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201525f6024820152604481018490526064016020604051808303815f875af115801561068e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e891906110b8565b5f5b818110156102115760015473ffffffffffffffffffffffffffffffffffffffff166323b872dd335f8686868181106106ee576106ee610fdb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b158015610767575f80fd5b505af1158015610779573d5f803e3d5ffd5b50505050808061078890611057565b9150506106b4565b5f61079b47836107ea565b90505f6107a782610810565b90506107b381836110a5565b604051909250339083156108fc029084905f818181858888f193505050501580156107e0573d5f803e3d5ffd5b5061021181610b69565b5f6107f3610c8f565b6107fd83856110d7565b61080791906110ee565b90505b92915050565b5f805f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663492917196040518163ffffffff1660e01b81526004016040805180830381865afa15801561087c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108a09190611126565b915091506108af848383610d25565b50949350505050565b5f806108c383610d52565b915091505f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1fe1f0a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610932573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109569190611148565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff808316602483015260448201869052919250908616906323b872dd906064016020604051808303815f875af11580156109d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109f691906110b8565b610a5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f466565207472616e73666572206661696c6564000000000000000000000000006044820152606401610411565b6002546040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff918216602482015260448101849052908616906323b872dd906064016020604051808303815f875af1158015610ad8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610afc91906110b8565b610b62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f466565207472616e73666572206661696c6564000000000000000000000000006044820152606401610411565b5050505050565b5f80610b7483610d52565b915091505f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1fe1f0a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c079190611148565b60405190915073ffffffffffffffffffffffffffffffffffffffff82169084156108fc029085905f818181858888f19350505050158015610c4a573d5f803e3d5ffd5b5060025460405173ffffffffffffffffffffffffffffffffffffffff9091169083156108fc029084905f818181858888f19350505050158015610b62573d5f803e3d5ffd5b600154604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290515f9273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa158015610cfc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d20919061108e565b905090565b5f8082610d3285876110d7565b610d3c91906110ee565b9150610d4882866110a5565b9050935093915050565b5f805f8060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80b1be76040518163ffffffff1660e01b81526004016040805180830381865afa158015610dbf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de39190611126565b91509150610df2858383610d25565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146102e8575f80fd5b5f8060408385031215610e30575f80fd5b8235610e3b81610dfe565b946020939093013593505050565b5f8083601f840112610e59575f80fd5b50813567ffffffffffffffff811115610e70575f80fd5b6020830191508360208260051b8501011115610e8a575f80fd5b9250929050565b5f805f60408486031215610ea3575f80fd5b8335610eae81610dfe565b9250602084013567ffffffffffffffff811115610ec9575f80fd5b610ed586828701610e49565b9497909650939450505050565b5f805f60408486031215610ef4575f80fd5b833567ffffffffffffffff811115610f0a575f80fd5b610f1686828701610e49565b909790965060209590950135949350505050565b5f60208284031215610f3a575f80fd5b5035919050565b5f805f8060408587031215610f54575f80fd5b843567ffffffffffffffff80821115610f6b575f80fd5b610f7788838901610e49565b90965094506020870135915080821115610f8f575f80fd5b50610f9c87828801610e49565b95989497509550505050565b5f8060208385031215610fb9575f80fd5b823567ffffffffffffffff811115610fcf575f80fd5b610df285828601610e49565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215611018575f80fd5b813561102381610dfe565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110875761108761102a565b5060010190565b5f6020828403121561109e575f80fd5b5051919050565b8181038181111561080a5761080a61102a565b5f602082840312156110c8575f80fd5b81518015158114611023575f80fd5b808202811582820484141761080a5761080a61102a565b5f82611121577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b5f8060408385031215611137575f80fd5b505080516020909101519092909150565b5f60208284031215611158575f80fd5b815161102381610dfe56fea164736f6c6343000814000a";

export class Treasury__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenAddress: string,
    factoryAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Treasury> {
    return super.deploy(
      tokenAddress,
      factoryAddress,
      overrides || {}
    ) as Promise<Treasury>;
  }
  getDeployTransaction(
    tokenAddress: string,
    factoryAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenAddress,
      factoryAddress,
      overrides || {}
    );
  }
  attach(address: string): Treasury {
    return super.attach(address) as Treasury;
  }
  connect(signer: Signer): Treasury__factory {
    return super.connect(signer) as Treasury__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryInterface {
    return new utils.Interface(_abi) as TreasuryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Treasury {
    return new Contract(address, _abi, signerOrProvider) as Treasury;
  }
}
