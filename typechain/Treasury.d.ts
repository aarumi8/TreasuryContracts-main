/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryInterface extends ethers.utils.Interface {
  functions: {
    "factoryContractAddress()": FunctionFragment;
    "primaryToken()": FunctionFragment;
    "withdrawERC20ByERC20(address,uint256)": FunctionFragment;
    "withdrawERC20ByERC721(address,uint256[])": FunctionFragment;
    "withdrawETHByERC20(uint256)": FunctionFragment;
    "withdrawETHByERC721(uint256[])": FunctionFragment;
    "withdrawMultipleTokensByERC20(address[],uint256)": FunctionFragment;
    "withdrawTokensByERC721(address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "factoryContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20ByERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20ByERC721",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHByERC20",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHByERC721",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMultipleTokensByERC20",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensByERC721",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "factoryContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20ByERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20ByERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHByERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHByERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMultipleTokensByERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensByERC721",
    data: BytesLike
  ): Result;

  events: {};
}

export class Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryInterface;

  functions: {
    factoryContractAddress(overrides?: CallOverrides): Promise<[string]>;

    primaryToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC20ByERC20(
      token: string,
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20ByERC721(
      token: string,
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETHByERC20(
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETHByERC721(
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawMultipleTokensByERC20(
      tokens: string[],
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokensByERC721(
      tokens: string[],
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  factoryContractAddress(overrides?: CallOverrides): Promise<string>;

  primaryToken(overrides?: CallOverrides): Promise<string>;

  withdrawERC20ByERC20(
    token: string,
    primaryTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20ByERC721(
    token: string,
    primaryTokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETHByERC20(
    primaryTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETHByERC721(
    primaryTokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawMultipleTokensByERC20(
    tokens: string[],
    primaryTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokensByERC721(
    tokens: string[],
    primaryTokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    factoryContractAddress(overrides?: CallOverrides): Promise<string>;

    primaryToken(overrides?: CallOverrides): Promise<string>;

    withdrawERC20ByERC20(
      token: string,
      primaryTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20ByERC721(
      token: string,
      primaryTokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETHByERC20(
      primaryTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETHByERC721(
      primaryTokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMultipleTokensByERC20(
      tokens: string[],
      primaryTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokensByERC721(
      tokens: string[],
      primaryTokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    factoryContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    primaryToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20ByERC20(
      token: string,
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20ByERC721(
      token: string,
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETHByERC20(
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETHByERC721(
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawMultipleTokensByERC20(
      tokens: string[],
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokensByERC721(
      tokens: string[],
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    factoryContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    primaryToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20ByERC20(
      token: string,
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20ByERC721(
      token: string,
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETHByERC20(
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETHByERC721(
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMultipleTokensByERC20(
      tokens: string[],
      primaryTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokensByERC721(
      tokens: string[],
      primaryTokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
